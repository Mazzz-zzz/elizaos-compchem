name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-typescript:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint TypeScript
      run: npm run lint
    
    - name: Build TypeScript
      run: npm run build
    
    - name: Run TypeScript tests
      run: npm test

  test-python:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: py/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install Python dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd py
        poetry install --no-interaction --no-root
    
    - name: Install project
      run: |
        cd py
        poetry install --no-interaction
    
    - name: Lint Python code
      run: |
        cd py
        poetry run flake8 parse_gaussian.py
    
    - name: Type check Python code
      run: |
        cd py
        poetry run mypy parse_gaussian.py
    
    - name: Run Python tests
      run: |
        cd py
        poetry run pytest --cov=parse_gaussian --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: py/coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-typescript, test-python]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install all dependencies
      run: |
        npm ci
        cd py && poetry install && cd ..
    
    - name: Build project
      run: npm run build
    
    - name: Test Python CLI interface
      run: |
        cd py
        echo "# B3LYP/6-31G(d)" > test.log
        echo "SCF Done:  E(RB3LYP) =    -40.5180970716     A.U." >> test.log
        poetry run python parse_gaussian.py test.log '{"filename": "test.log"}' --format turtle | grep "QuantumCalculation"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit (npm)
      run: npm audit --audit-level moderate
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Run security audit (Python)
      run: |
        cd py
        poetry install
        poetry run pip install safety
        poetry run safety check

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [test-typescript, test-python, integration-test]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }} 